import { Action } from "./action";
import { ActionDescriptor } from "./action_descriptor";
import { Multimap } from "@stimulus/multimap";
import { TokenListObserver } from "@stimulus/mutation-observers";
var InlineActionObserver = /** @class */ (function () {
    function InlineActionObserver(context, delegate) {
        this.context = context;
        this.delegate = delegate;
        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);
        this.connectedActions = new Multimap();
    }
    Object.defineProperty(InlineActionObserver.prototype, "scope", {
        get: function () {
            return this.context.scope;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineActionObserver.prototype, "configuration", {
        get: function () {
            return this.scope.configuration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineActionObserver.prototype, "attributeName", {
        get: function () {
            return this.configuration.actionAttribute;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineActionObserver.prototype, "element", {
        get: function () {
            return this.scope.element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineActionObserver.prototype, "identifier", {
        get: function () {
            return this.scope.identifier;
        },
        enumerable: true,
        configurable: true
    });
    InlineActionObserver.prototype.start = function () {
        this.tokenListObserver.start();
    };
    InlineActionObserver.prototype.stop = function () {
        this.tokenListObserver.stop();
    };
    // Token list observer delegate
    InlineActionObserver.prototype.elementMatchedTokenForAttribute = function (element, token, attributeName) {
        if (this.scope.containsElement(element)) {
            var action = this.buildActionForElementWithDescriptorString(element, token);
            if (action) {
                this.connectedActions.add(element, action);
                this.delegate.inlineActionConnected(action);
            }
        }
    };
    InlineActionObserver.prototype.elementUnmatchedTokenForAttribute = function (element, token, attributeName) {
        var action = this.getConnectedActionForElementWithDescriptorString(element, token);
        if (action) {
            this.connectedActions.delete(element, action);
            this.delegate.inlineActionDisconnected(action);
        }
    };
    InlineActionObserver.prototype.getConnectedActionForElementWithDescriptorString = function (element, descriptorString) {
        var newAction = this.buildActionForElementWithDescriptorString(element, descriptorString);
        if (newAction) {
            var actions = this.connectedActions.getValuesForKey(element);
            return actions.find(function (action) { return action.hasSameDescriptorAs(newAction); });
        }
    };
    InlineActionObserver.prototype.buildActionForElementWithDescriptorString = function (element, descriptorString) {
        try {
            var descriptor = ActionDescriptor.forElementWithInlineDescriptorString(element, descriptorString);
            if (descriptor.identifier == this.identifier) {
                return new Action(this.context, descriptor, descriptor.eventTarget);
            }
        }
        catch (error) {
            this.context.reportError(error, "parsing descriptor string \"" + descriptorString + "\" for element", element);
        }
    };
    return InlineActionObserver;
}());
export { InlineActionObserver };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lX2FjdGlvbl9vYnNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BzdGltdWx1cy9jb3JlL3NyYy9pbmxpbmVfYWN0aW9uX29ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDakMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFHdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRTdDLE9BQU8sRUFBRSxpQkFBaUIsRUFBNkIsTUFBTSw4QkFBOEIsQ0FBQTtBQU8zRjtJQU1FLDhCQUFZLE9BQWdCLEVBQUUsUUFBc0M7UUFDbEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7UUFDeEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3RGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLFFBQVEsRUFBbUIsQ0FBQTtJQUN6RCxDQUFDO0lBRUQsc0JBQUksdUNBQUs7YUFBVDtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQTtRQUMzQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLCtDQUFhO2FBQWpCO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFBO1FBQ2pDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksK0NBQWE7YUFBakI7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUE7UUFDM0MsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSx5Q0FBTzthQUFYO1lBQ0UsTUFBTSxD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