import { ContextSet } from "./context_set";
import { TokenListObserver } from "@stimulus/mutation-observers";
var Router = /** @class */ (function () {
    function Router(application) {
        this.application = application;
        this.tokenListObserver = new TokenListObserver(this.element, this.controllerAttribute, this);
        this.contextSets = new Map;
    }
    Object.defineProperty(Router.prototype, "configuration", {
        get: function () {
            return this.application.configuration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Router.prototype, "element", {
        get: function () {
            return this.configuration.rootElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Router.prototype, "controllerAttribute", {
        get: function () {
            return this.configuration.controllerAttribute;
        },
        enumerable: true,
        configurable: true
    });
    Router.prototype.start = function () {
        this.tokenListObserver.start();
    };
    Router.prototype.stop = function () {
        this.tokenListObserver.stop();
    };
    Router.prototype.register = function (identifier, controllerConstructor) {
        if (this.contextSets.has(identifier)) {
            throw new Error("Router already has a controller registered with the identifier '" + identifier + "'");
        }
        var contextSet = new ContextSet(this, identifier, controllerConstructor);
        this.contextSets.set(identifier, contextSet);
        this.connectContextSet(contextSet);
    };
    Router.prototype.unregister = function (identifier) {
        var contextSet = this.contextSets.get(identifier);
        if (contextSet) {
            this.disconnectContextSet(contextSet);
            this.contextSets.delete(identifier);
        }
    };
    // Token list observer delegate
    Router.prototype.elementMatchedTokenForAttribute = function (element, token, attributeName) {
        this.connectContextForIdentifierToElement(token, element);
    };
    Router.prototype.elementUnmatchedTokenForAttribute = function (element, token, attributeName) {
        this.disconnectContextForIdentifierFromElement(token, element);
    };
    // Contexts
    Router.prototype.getContextForElementAndIdentifier = function (element, identifier) {
        var contextSet = this.contextSets.get(identifier);
        if (contextSet) {
            return contextSet.getContextForElement(element);
        }
    };
    Router.prototype.connectContextSet = function (contextSet) {
        var elements = this.tokenListObserver.getElementsMatchingToken(contextSet.identifier);
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var element = elements_1[_i];
            contextSet.connect(element);
        }
    };
    Router.prototype.disconnectContextSet = function (contextSet) {
        var contexts = contextSet.contexts;
        for (var _i = 0, contexts_1 = contexts; _i < contexts_1.length; _i++) {
            var element = contexts_1[_i].element;
            contextSet.disconnect(element);
        }
    };
    Router.prototype.connectContextForIdentifierToElement = function (identifier, element) {
        var contextSet = this.contextSets.get(identifier);
        if (contextSet) {
            contextSet.connect(element);
        }
    };
    Router.prototype.disconnectContextForIdentifierFromElement = function (identifier, element) {
        var contextSet = this.contextSets.get(identifier);
        if (contextSet) {
            contextSet.disconnect(element);
        }
    };
    return Router;
}());
export { Router };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQHN0aW11bHVzL2NvcmUvc3JjL3JvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRTFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBNkIsTUFBTSw4QkFBOEIsQ0FBQTtBQUUzRjtJQUtFLGdCQUFZLFdBQXdCO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFBO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxDQUFBO1FBQzVGLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxHQUFHLENBQUE7SUFDNUIsQ0FBQztJQUVELHNCQUFJLGlDQUFhO2FBQWpCO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFBO1FBQ3ZDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksMkJBQU87YUFBWDtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQTtRQUN2QyxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHVDQUFtQjthQUF2QjtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFBO1FBQy9DLENBQUM7OztPQUFBO0lBRUQsc0JBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQscUJBQUksR0FBSjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUMvQixDQUFDO0lBRUQseUJBQVEsR0FBUixVQUFTLFVBQWtCLEVBQUUscUJBQTRDO1FBQ3ZFLEVBQUUsQ0FBQyxDQUFDLElBQUks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