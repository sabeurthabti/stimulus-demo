import { Action } from "./action";
import { Application } from "./application";
import { Configuration } from "./configuration";
import { ContextSet } from "./context_set";
import { Controller } from "./controller";
import { InlineActionObserverDelegate } from "./inline_action_observer";
import { Scope } from "./scope";
export declare class Context implements InlineActionObserverDelegate {
    contextSet: ContextSet;
    scope: Scope;
    controller: Controller;
    private actions;
    private inlineActionObserver;
    constructor(contextSet: ContextSet, element: Element);
    connect(): void;
    disconnect(): void;
    readonly application: Application;
    readonly identifier: string;
    readonly configuration: Configuration;
    readonly element: Element;
    readonly parentElement: Element | null;
    addAction(action: Action): any;
    addAction(descriptorString: string, eventTarget: EventTarget): any;
    removeAction(action: Action): void;
    inlineActionConnected(action: Action): void;
    inlineActionDisconnected(action: Action): void;
    reportError(error: any, message: any, ...args: any[]): void;
}
